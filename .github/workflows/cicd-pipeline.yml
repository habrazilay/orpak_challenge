name: CI/CD Pipeline

on:
  # workflow_dispatch: # Enables manual trigger via GitHub Actions UI
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Workflow
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    # Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
      # # continue-on-error: true # For simulation

    # Verify AWS Credentials
    - name: Verify AWS Credentials
      run: aws sts get-caller-identity

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init

    # Validate Terraform configuration
    - name: Terraform Validate
      run: terraform validate

    # Terraform Plan with logs
    - name: Terraform Plan
      run: terraform plan -out=tfplan && terraform show -json tfplan > plan.json

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve
      
  application:
    name: Application Deployment
    runs-on: ubuntu-latest
    needs: terraform

    steps:
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # # Configure AWS Credentials
    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_REGION }}
    #   # # continue-on-error: true # For simulation

  #   # Setup kubectl
  #   - name: Setup kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'v1.27.3'

  #   # Authenticate with EKS cluster
  #   - name: Update kubeconfig
  #     run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

  #   # Deploy to Kubernetes
  #   - name: Deploy Application
  #     run: |
  #       kubectl apply -f kubernetes/deployment.yaml
  #       kubectl apply -f kubernetes/service.yaml

  # monitoring:
  #   name: Deploy Monitoring Stack
  #   runs-on: ubuntu-latest
  #   needs: terraform

  #   steps:
  #   # Checkout the repository
  #   - name: Checkout Code
  #     uses: actions/checkout@v3

  #   # Configure AWS Credentials
  #   - name: Configure AWS Credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}
  #     # continue-on-error: true # For simulation

  #   # Setup kubectl
  #   - name: Setup kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'v1.27.3'

  #   # Authenticate with EKS cluster
  #   - name: Update kubeconfig
  #     run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

  #   # Deploy Metrics Server
  #   - name: Deploy Metrics Server
  #     run: |
  #       kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

  #   # Deploy Prometheus
  #   - name: Deploy Prometheus
  #     run: |
  #       helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  #       helm repo update
  #       helm install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace

  #   # Deploy Node Exporter
  #   - name: Deploy Node Exporter
  #     run: |
  #       helm install node-exporter prometheus-community/prometheus-node-exporter --namespace monitoring

  #   # Deploy kube-state-metrics
  #   - name: Deploy kube-state-metrics
  #     run: |
  #       helm install kube-state-metrics prometheus-community/kube-state-metrics --namespace monitoring

  # logging:
  #   name: Deploy ELK Stack for Log Aggregation
  #   runs-on: ubuntu-latest
  #   needs: terraform

  #   steps:
  #   # Checkout the repository
  #   - name: Checkout Code
  #     uses: actions/checkout@v3

  #   # Configure AWS Credentials
  #   - name: Configure AWS Credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}
  #     # continue-on-error: true # For simulation

  #   # Setup kubectl
  #   - name: Setup kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'v1.27.3'

  #   # Authenticate with EKS cluster
  #   - name: Update kubeconfig
  #     run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

  #   # Deploy ElasticSearch
  #   - name: Deploy ElasticSearch
  #     run: |
  #       helm repo add elastic https://helm.elastic.co
  #       helm repo update
  #       helm install elasticsearch elastic/elasticsearch --namespace logging --create-namespace

  #   # Deploy Kibana
  #   - name: Deploy Kibana
  #     run: |
  #       helm install kibana elastic/kibana --namespace logging

  #   # Deploy Fluentd
  #   - name: Deploy Fluentd
  #     run: |
  #       helm repo add fluent https://fluent.github.io/helm-charts
  #       helm repo update
  #       helm install fluentd fluent/fluentd --namespace logging
